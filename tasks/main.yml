---
# tasks file for pve_ct_download
#
#  ████████╗ █████╗ ███████╗██╗  ██╗
#  ╚══██╔══╝██╔══██╗██╔════╝██║ ██╔╝
#     ██║   ███████║███████╗█████╔╝
#     ██║   ██╔══██║╚════██║██╔═██╗
#     ██║   ██║  ██║███████║██║  ██╗
#     ╚═╝   ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝
#

# -----------------------------------------------------------------------------
# Load variables from files, dynamically within a task
# -----------------------------------------------------------------------------
- name: (pve_ct_download) | main | Load OS dependent variables
  ansible.builtin.include_vars: '{{ item_os }}'
  with_first_found:
    - files:
        - '{{ ansible_distribution | lower }}_{{ ansible_distribution_major_version | lower }}.yml'
        - '{{ ansible_distribution | lower }}.yml'
        - '{{ ansible_os_family | lower }}_{{ ansible_distribution_major_version | lower }}.yml'
        - '{{ ansible_os_family | lower }}.yml'
      skip: false
  loop_control:
    loop_var: item_os
  tags:
    - prerequisite

# -----------------------------------------------------------------------------
# Ensure variable(s) meets condition(s)
# -----------------------------------------------------------------------------
- name: (pve_ct_download) | main | OS is supported.
  ansible.builtin.assert:
    that: os_supported == True

# -----------------------------------------------------------------------------
# Use universal package manager to install required package(s)
# -----------------------------------------------------------------------------
- name: (pve_ct_download) | main | Ensure that the Linux packages are installed
  become: true
  ansible.builtin.package:
    name: '{{ item }}'
    state: present
  with_items: "{{ linux_pkgs }}"
  tags:
    - prerequisite

# -----------------------------------------------------------------------------
# Manage Python library dependencies
# -----------------------------------------------------------------------------
- name: (pve_ct_download) | main | Install python package
  ansible.builtin.pip:
    break_system_packages: true
    name: "{{ item }}"
    state: present
  with_items: "{{ python_module_pkgs }}"
  when:
    - python_module_pkgs is defined
    - python_module_pkgs|length > 0
  tags:
    - prerequisite

# -----------------------------------------------------------------------------
# Import task the current playbook for subsequent execution
# -----------------------------------------------------------------------------
- name: (pve_ct_download) | main | Import 'preliminary' task statically
  ansible.builtin.import_tasks: "preliminary.yml"
  tags:
    - preliminary
    - prerequisite

- name: (pve_ct_download) | main | Proxmox connectivity ...
  when:
    - latest_image is defined
    - latest_image|length > 0
  block:

    # -------------------------------------------------------------------------
    # Retrieves a list of nodes in the Proxmox cluster.
    # -------------------------------------------------------------------------
    - name: (pve_ct_download) | main | Retrieve Proxmox node information
      community.general.proxmox_node_info:
        api_host: "{{ pve_host }}"
        api_port: "{{ pve_port }}"
        api_token_id: "{{ pve_tokenid.split('!')[1] }}"
        api_token_secret: "{{ pve_token_secret }}"
        api_user: "{{ pve_tokenid.split('!')[0] }}"
        validate_certs: "{{ pve_validate_certs | default(false) }}"
      register: this

    # -------------------------------------------------------------------------
    # Filters and selects nodes for template application.
    # -------------------------------------------------------------------------
    - name: (pve_ct_download) | main | Extract node names from Proxmox node information
      ansible.builtin.set_fact:
        nodes: >-
          {{ this.proxmox_nodes | map(attribute='node') }}

    # -------------------------------------------------------------------------
    # Downloads the latest template image to the specified storage on the
    # selected nodes.
    # -------------------------------------------------------------------------
    - name: (pve_ct_download) | main | Retrieve Proxmox storage information
      community.general.proxmox_storage_info:
        api_host: "{{ pve_host }}"
        api_port: "{{ pve_port | default(8006) }}"
        api_token_id: "{{ pve_tokenid.split('!')[1] }}"
        api_token_secret: "{{ pve_token_secret }}"
        api_user: "{{ pve_tokenid.split('!')[0] }}"
        validate_certs: "{{ pve_validate_certs | default(false) }}"
      register: this

    # -------------------------------------------------------------------------
    # Filters storages that support template storage and ensures at least one is available.
    # -------------------------------------------------------------------------
    - name: (pve_ct_download) | main | Filter storages supporting VZ templates
      ansible.builtin.set_fact:
        filtered_storages: >-
            {{ this.proxmox_storages | selectattr('content', 'search', 'vztmpl') | map(attribute='storage') | list }}

    - name: (pve_ct_download) | main | Fail if no suitable storage is found
      ansible.builtin.fail:
        msg: "No suitable storage(s) supporting VZ templates found in the cluster."
      when: filtered_storages|length == 0

    - name: (pve_ct_download) | main | Download Proxmox appliance container template(s)
      community.general.proxmox_template:
        api_host: "{{ pve_host }}"
        api_port: "{{ pve_port | default(8006) }}"
        api_token_id: "{{ pve_tokenid.split('!')[1] }}"
        api_token_secret: "{{ pve_token_secret }}"
        api_user: "{{ pve_tokenid.split('!')[0] }}"
        node: "{{ item.0 }}"
        state: "present"
        storage: "{{ item.1 }}"
        template: "{{ item.2 }}"
        timeout: "{{ pve_timeout | default(0) }}"
        force: "{{ pve_force | default(false) }}"
      loop: "{{ query('nested', nodes, filtered_storages, latest_image) }}"
